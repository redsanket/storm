#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import HBServer
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void createPath(string path)'
  print '  bool exists(string path)'
  print '  void sendPulse(Pulse pulse)'
  print '  HBRecords getAllPulseForPath(string idPrefix)'
  print '  Pulse getPulse(string id)'
  print '  void deletePath(string idPrefix)'
  print '  void deletePulseId(string id)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = HBServer.Client(protocol)
transport.open()

if cmd == 'createPath':
  if len(args) != 1:
    print 'createPath requires 1 args'
    sys.exit(1)
  pp.pprint(client.createPath(args[0],))

elif cmd == 'exists':
  if len(args) != 1:
    print 'exists requires 1 args'
    sys.exit(1)
  pp.pprint(client.exists(args[0],))

elif cmd == 'sendPulse':
  if len(args) != 1:
    print 'sendPulse requires 1 args'
    sys.exit(1)
  pp.pprint(client.sendPulse(eval(args[0]),))

elif cmd == 'getAllPulseForPath':
  if len(args) != 1:
    print 'getAllPulseForPath requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAllPulseForPath(args[0],))

elif cmd == 'getPulse':
  if len(args) != 1:
    print 'getPulse requires 1 args'
    sys.exit(1)
  pp.pprint(client.getPulse(args[0],))

elif cmd == 'deletePath':
  if len(args) != 1:
    print 'deletePath requires 1 args'
    sys.exit(1)
  pp.pprint(client.deletePath(args[0],))

elif cmd == 'deletePulseId':
  if len(args) != 1:
    print 'deletePulseId requires 1 args'
    sys.exit(1)
  pp.pprint(client.deletePulseId(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
