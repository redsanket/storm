/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package backtype.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-3-10")
public class BoltAggregateStats implements org.apache.thrift.TBase<BoltAggregateStats, BoltAggregateStats._Fields>, java.io.Serializable, Cloneable, Comparable<BoltAggregateStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BoltAggregateStats");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_EXECUTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_executors", org.apache.thrift.protocol.TType.I32, (short)513);
  private static final org.apache.thrift.protocol.TField NUM_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_tasks", org.apache.thrift.protocol.TType.I32, (short)514);
  private static final org.apache.thrift.protocol.TField NUM_EMITTED_FIELD_DESC = new org.apache.thrift.protocol.TField("num_emitted", org.apache.thrift.protocol.TType.I64, (short)515);
  private static final org.apache.thrift.protocol.TField NUM_TRANSFERRED_FIELD_DESC = new org.apache.thrift.protocol.TField("num_transferred", org.apache.thrift.protocol.TType.I64, (short)516);
  private static final org.apache.thrift.protocol.TField NUM_ACKED_FIELD_DESC = new org.apache.thrift.protocol.TField("num_acked", org.apache.thrift.protocol.TType.I64, (short)517);
  private static final org.apache.thrift.protocol.TField NUM_FAILED_FIELD_DESC = new org.apache.thrift.protocol.TField("num_failed", org.apache.thrift.protocol.TType.I64, (short)518);
  private static final org.apache.thrift.protocol.TField LAST_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("last_error", org.apache.thrift.protocol.TType.STRUCT, (short)519);
  private static final org.apache.thrift.protocol.TField EXECUTE_LATENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("execute_latency", org.apache.thrift.protocol.TType.DOUBLE, (short)520);
  private static final org.apache.thrift.protocol.TField PROCESS_LATENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("process_latency", org.apache.thrift.protocol.TType.DOUBLE, (short)521);
  private static final org.apache.thrift.protocol.TField NUM_EXECUTED_FIELD_DESC = new org.apache.thrift.protocol.TField("num_executed", org.apache.thrift.protocol.TType.I64, (short)522);
  private static final org.apache.thrift.protocol.TField CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("capacity", org.apache.thrift.protocol.TType.DOUBLE, (short)523);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BoltAggregateStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BoltAggregateStatsTupleSchemeFactory());
  }

  private String id; // required
  private int num_executors; // optional
  private int num_tasks; // optional
  private long num_emitted; // optional
  private long num_transferred; // optional
  private long num_acked; // optional
  private long num_failed; // optional
  private ErrorInfo last_error; // optional
  private double execute_latency; // optional
  private double process_latency; // optional
  private long num_executed; // optional
  private double capacity; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NUM_EXECUTORS((short)513, "num_executors"),
    NUM_TASKS((short)514, "num_tasks"),
    NUM_EMITTED((short)515, "num_emitted"),
    NUM_TRANSFERRED((short)516, "num_transferred"),
    NUM_ACKED((short)517, "num_acked"),
    NUM_FAILED((short)518, "num_failed"),
    LAST_ERROR((short)519, "last_error"),
    EXECUTE_LATENCY((short)520, "execute_latency"),
    PROCESS_LATENCY((short)521, "process_latency"),
    NUM_EXECUTED((short)522, "num_executed"),
    CAPACITY((short)523, "capacity");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 513: // NUM_EXECUTORS
          return NUM_EXECUTORS;
        case 514: // NUM_TASKS
          return NUM_TASKS;
        case 515: // NUM_EMITTED
          return NUM_EMITTED;
        case 516: // NUM_TRANSFERRED
          return NUM_TRANSFERRED;
        case 517: // NUM_ACKED
          return NUM_ACKED;
        case 518: // NUM_FAILED
          return NUM_FAILED;
        case 519: // LAST_ERROR
          return LAST_ERROR;
        case 520: // EXECUTE_LATENCY
          return EXECUTE_LATENCY;
        case 521: // PROCESS_LATENCY
          return PROCESS_LATENCY;
        case 522: // NUM_EXECUTED
          return NUM_EXECUTED;
        case 523: // CAPACITY
          return CAPACITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_EXECUTORS_ISSET_ID = 0;
  private static final int __NUM_TASKS_ISSET_ID = 1;
  private static final int __NUM_EMITTED_ISSET_ID = 2;
  private static final int __NUM_TRANSFERRED_ISSET_ID = 3;
  private static final int __NUM_ACKED_ISSET_ID = 4;
  private static final int __NUM_FAILED_ISSET_ID = 5;
  private static final int __EXECUTE_LATENCY_ISSET_ID = 6;
  private static final int __PROCESS_LATENCY_ISSET_ID = 7;
  private static final int __NUM_EXECUTED_ISSET_ID = 8;
  private static final int __CAPACITY_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NUM_EXECUTORS,_Fields.NUM_TASKS,_Fields.NUM_EMITTED,_Fields.NUM_TRANSFERRED,_Fields.NUM_ACKED,_Fields.NUM_FAILED,_Fields.LAST_ERROR,_Fields.EXECUTE_LATENCY,_Fields.PROCESS_LATENCY,_Fields.NUM_EXECUTED,_Fields.CAPACITY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_EXECUTORS, new org.apache.thrift.meta_data.FieldMetaData("num_executors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_TASKS, new org.apache.thrift.meta_data.FieldMetaData("num_tasks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_EMITTED, new org.apache.thrift.meta_data.FieldMetaData("num_emitted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_TRANSFERRED, new org.apache.thrift.meta_data.FieldMetaData("num_transferred", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_ACKED, new org.apache.thrift.meta_data.FieldMetaData("num_acked", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_FAILED, new org.apache.thrift.meta_data.FieldMetaData("num_failed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_ERROR, new org.apache.thrift.meta_data.FieldMetaData("last_error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorInfo.class)));
    tmpMap.put(_Fields.EXECUTE_LATENCY, new org.apache.thrift.meta_data.FieldMetaData("execute_latency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROCESS_LATENCY, new org.apache.thrift.meta_data.FieldMetaData("process_latency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUM_EXECUTED, new org.apache.thrift.meta_data.FieldMetaData("num_executed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("capacity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BoltAggregateStats.class, metaDataMap);
  }

  public BoltAggregateStats() {
  }

  public BoltAggregateStats(
    String id)
  {
    this();
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BoltAggregateStats(BoltAggregateStats other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_id()) {
      this.id = other.id;
    }
    this.num_executors = other.num_executors;
    this.num_tasks = other.num_tasks;
    this.num_emitted = other.num_emitted;
    this.num_transferred = other.num_transferred;
    this.num_acked = other.num_acked;
    this.num_failed = other.num_failed;
    if (other.is_set_last_error()) {
      this.last_error = new ErrorInfo(other.last_error);
    }
    this.execute_latency = other.execute_latency;
    this.process_latency = other.process_latency;
    this.num_executed = other.num_executed;
    this.capacity = other.capacity;
  }

  public BoltAggregateStats deepCopy() {
    return new BoltAggregateStats(this);
  }

  @Override
  public void clear() {
    this.id = null;
    set_num_executors_isSet(false);
    this.num_executors = 0;
    set_num_tasks_isSet(false);
    this.num_tasks = 0;
    set_num_emitted_isSet(false);
    this.num_emitted = 0;
    set_num_transferred_isSet(false);
    this.num_transferred = 0;
    set_num_acked_isSet(false);
    this.num_acked = 0;
    set_num_failed_isSet(false);
    this.num_failed = 0;
    this.last_error = null;
    set_execute_latency_isSet(false);
    this.execute_latency = 0.0;
    set_process_latency_isSet(false);
    this.process_latency = 0.0;
    set_num_executed_isSet(false);
    this.num_executed = 0;
    set_capacity_isSet(false);
    this.capacity = 0.0;
  }

  public String get_id() {
    return this.id;
  }

  public void set_id(String id) {
    this.id = id;
  }

  public void unset_id() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean is_set_id() {
    return this.id != null;
  }

  public void set_id_isSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int get_num_executors() {
    return this.num_executors;
  }

  public void set_num_executors(int num_executors) {
    this.num_executors = num_executors;
    set_num_executors_isSet(true);
  }

  public void unset_num_executors() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_EXECUTORS_ISSET_ID);
  }

  /** Returns true if field num_executors is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_executors() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_EXECUTORS_ISSET_ID);
  }

  public void set_num_executors_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_EXECUTORS_ISSET_ID, value);
  }

  public int get_num_tasks() {
    return this.num_tasks;
  }

  public void set_num_tasks(int num_tasks) {
    this.num_tasks = num_tasks;
    set_num_tasks_isSet(true);
  }

  public void unset_num_tasks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_TASKS_ISSET_ID);
  }

  /** Returns true if field num_tasks is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_tasks() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_TASKS_ISSET_ID);
  }

  public void set_num_tasks_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_TASKS_ISSET_ID, value);
  }

  public long get_num_emitted() {
    return this.num_emitted;
  }

  public void set_num_emitted(long num_emitted) {
    this.num_emitted = num_emitted;
    set_num_emitted_isSet(true);
  }

  public void unset_num_emitted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_EMITTED_ISSET_ID);
  }

  /** Returns true if field num_emitted is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_emitted() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_EMITTED_ISSET_ID);
  }

  public void set_num_emitted_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_EMITTED_ISSET_ID, value);
  }

  public long get_num_transferred() {
    return this.num_transferred;
  }

  public void set_num_transferred(long num_transferred) {
    this.num_transferred = num_transferred;
    set_num_transferred_isSet(true);
  }

  public void unset_num_transferred() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_TRANSFERRED_ISSET_ID);
  }

  /** Returns true if field num_transferred is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_transferred() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_TRANSFERRED_ISSET_ID);
  }

  public void set_num_transferred_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_TRANSFERRED_ISSET_ID, value);
  }

  public long get_num_acked() {
    return this.num_acked;
  }

  public void set_num_acked(long num_acked) {
    this.num_acked = num_acked;
    set_num_acked_isSet(true);
  }

  public void unset_num_acked() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ACKED_ISSET_ID);
  }

  /** Returns true if field num_acked is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_acked() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ACKED_ISSET_ID);
  }

  public void set_num_acked_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ACKED_ISSET_ID, value);
  }

  public long get_num_failed() {
    return this.num_failed;
  }

  public void set_num_failed(long num_failed) {
    this.num_failed = num_failed;
    set_num_failed_isSet(true);
  }

  public void unset_num_failed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_FAILED_ISSET_ID);
  }

  /** Returns true if field num_failed is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_failed() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_FAILED_ISSET_ID);
  }

  public void set_num_failed_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_FAILED_ISSET_ID, value);
  }

  public ErrorInfo get_last_error() {
    return this.last_error;
  }

  public void set_last_error(ErrorInfo last_error) {
    this.last_error = last_error;
  }

  public void unset_last_error() {
    this.last_error = null;
  }

  /** Returns true if field last_error is set (has been assigned a value) and false otherwise */
  public boolean is_set_last_error() {
    return this.last_error != null;
  }

  public void set_last_error_isSet(boolean value) {
    if (!value) {
      this.last_error = null;
    }
  }

  public double get_execute_latency() {
    return this.execute_latency;
  }

  public void set_execute_latency(double execute_latency) {
    this.execute_latency = execute_latency;
    set_execute_latency_isSet(true);
  }

  public void unset_execute_latency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECUTE_LATENCY_ISSET_ID);
  }

  /** Returns true if field execute_latency is set (has been assigned a value) and false otherwise */
  public boolean is_set_execute_latency() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECUTE_LATENCY_ISSET_ID);
  }

  public void set_execute_latency_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECUTE_LATENCY_ISSET_ID, value);
  }

  public double get_process_latency() {
    return this.process_latency;
  }

  public void set_process_latency(double process_latency) {
    this.process_latency = process_latency;
    set_process_latency_isSet(true);
  }

  public void unset_process_latency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROCESS_LATENCY_ISSET_ID);
  }

  /** Returns true if field process_latency is set (has been assigned a value) and false otherwise */
  public boolean is_set_process_latency() {
    return EncodingUtils.testBit(__isset_bitfield, __PROCESS_LATENCY_ISSET_ID);
  }

  public void set_process_latency_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROCESS_LATENCY_ISSET_ID, value);
  }

  public long get_num_executed() {
    return this.num_executed;
  }

  public void set_num_executed(long num_executed) {
    this.num_executed = num_executed;
    set_num_executed_isSet(true);
  }

  public void unset_num_executed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_EXECUTED_ISSET_ID);
  }

  /** Returns true if field num_executed is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_executed() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_EXECUTED_ISSET_ID);
  }

  public void set_num_executed_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_EXECUTED_ISSET_ID, value);
  }

  public double get_capacity() {
    return this.capacity;
  }

  public void set_capacity(double capacity) {
    this.capacity = capacity;
    set_capacity_isSet(true);
  }

  public void unset_capacity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAPACITY_ISSET_ID);
  }

  /** Returns true if field capacity is set (has been assigned a value) and false otherwise */
  public boolean is_set_capacity() {
    return EncodingUtils.testBit(__isset_bitfield, __CAPACITY_ISSET_ID);
  }

  public void set_capacity_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAPACITY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((String)value);
      }
      break;

    case NUM_EXECUTORS:
      if (value == null) {
        unset_num_executors();
      } else {
        set_num_executors((Integer)value);
      }
      break;

    case NUM_TASKS:
      if (value == null) {
        unset_num_tasks();
      } else {
        set_num_tasks((Integer)value);
      }
      break;

    case NUM_EMITTED:
      if (value == null) {
        unset_num_emitted();
      } else {
        set_num_emitted((Long)value);
      }
      break;

    case NUM_TRANSFERRED:
      if (value == null) {
        unset_num_transferred();
      } else {
        set_num_transferred((Long)value);
      }
      break;

    case NUM_ACKED:
      if (value == null) {
        unset_num_acked();
      } else {
        set_num_acked((Long)value);
      }
      break;

    case NUM_FAILED:
      if (value == null) {
        unset_num_failed();
      } else {
        set_num_failed((Long)value);
      }
      break;

    case LAST_ERROR:
      if (value == null) {
        unset_last_error();
      } else {
        set_last_error((ErrorInfo)value);
      }
      break;

    case EXECUTE_LATENCY:
      if (value == null) {
        unset_execute_latency();
      } else {
        set_execute_latency((Double)value);
      }
      break;

    case PROCESS_LATENCY:
      if (value == null) {
        unset_process_latency();
      } else {
        set_process_latency((Double)value);
      }
      break;

    case NUM_EXECUTED:
      if (value == null) {
        unset_num_executed();
      } else {
        set_num_executed((Long)value);
      }
      break;

    case CAPACITY:
      if (value == null) {
        unset_capacity();
      } else {
        set_capacity((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return get_id();

    case NUM_EXECUTORS:
      return Integer.valueOf(get_num_executors());

    case NUM_TASKS:
      return Integer.valueOf(get_num_tasks());

    case NUM_EMITTED:
      return Long.valueOf(get_num_emitted());

    case NUM_TRANSFERRED:
      return Long.valueOf(get_num_transferred());

    case NUM_ACKED:
      return Long.valueOf(get_num_acked());

    case NUM_FAILED:
      return Long.valueOf(get_num_failed());

    case LAST_ERROR:
      return get_last_error();

    case EXECUTE_LATENCY:
      return Double.valueOf(get_execute_latency());

    case PROCESS_LATENCY:
      return Double.valueOf(get_process_latency());

    case NUM_EXECUTED:
      return Long.valueOf(get_num_executed());

    case CAPACITY:
      return Double.valueOf(get_capacity());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return is_set_id();
    case NUM_EXECUTORS:
      return is_set_num_executors();
    case NUM_TASKS:
      return is_set_num_tasks();
    case NUM_EMITTED:
      return is_set_num_emitted();
    case NUM_TRANSFERRED:
      return is_set_num_transferred();
    case NUM_ACKED:
      return is_set_num_acked();
    case NUM_FAILED:
      return is_set_num_failed();
    case LAST_ERROR:
      return is_set_last_error();
    case EXECUTE_LATENCY:
      return is_set_execute_latency();
    case PROCESS_LATENCY:
      return is_set_process_latency();
    case NUM_EXECUTED:
      return is_set_num_executed();
    case CAPACITY:
      return is_set_capacity();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BoltAggregateStats)
      return this.equals((BoltAggregateStats)that);
    return false;
  }

  public boolean equals(BoltAggregateStats that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.is_set_id();
    boolean that_present_id = true && that.is_set_id();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_num_executors = true && this.is_set_num_executors();
    boolean that_present_num_executors = true && that.is_set_num_executors();
    if (this_present_num_executors || that_present_num_executors) {
      if (!(this_present_num_executors && that_present_num_executors))
        return false;
      if (this.num_executors != that.num_executors)
        return false;
    }

    boolean this_present_num_tasks = true && this.is_set_num_tasks();
    boolean that_present_num_tasks = true && that.is_set_num_tasks();
    if (this_present_num_tasks || that_present_num_tasks) {
      if (!(this_present_num_tasks && that_present_num_tasks))
        return false;
      if (this.num_tasks != that.num_tasks)
        return false;
    }

    boolean this_present_num_emitted = true && this.is_set_num_emitted();
    boolean that_present_num_emitted = true && that.is_set_num_emitted();
    if (this_present_num_emitted || that_present_num_emitted) {
      if (!(this_present_num_emitted && that_present_num_emitted))
        return false;
      if (this.num_emitted != that.num_emitted)
        return false;
    }

    boolean this_present_num_transferred = true && this.is_set_num_transferred();
    boolean that_present_num_transferred = true && that.is_set_num_transferred();
    if (this_present_num_transferred || that_present_num_transferred) {
      if (!(this_present_num_transferred && that_present_num_transferred))
        return false;
      if (this.num_transferred != that.num_transferred)
        return false;
    }

    boolean this_present_num_acked = true && this.is_set_num_acked();
    boolean that_present_num_acked = true && that.is_set_num_acked();
    if (this_present_num_acked || that_present_num_acked) {
      if (!(this_present_num_acked && that_present_num_acked))
        return false;
      if (this.num_acked != that.num_acked)
        return false;
    }

    boolean this_present_num_failed = true && this.is_set_num_failed();
    boolean that_present_num_failed = true && that.is_set_num_failed();
    if (this_present_num_failed || that_present_num_failed) {
      if (!(this_present_num_failed && that_present_num_failed))
        return false;
      if (this.num_failed != that.num_failed)
        return false;
    }

    boolean this_present_last_error = true && this.is_set_last_error();
    boolean that_present_last_error = true && that.is_set_last_error();
    if (this_present_last_error || that_present_last_error) {
      if (!(this_present_last_error && that_present_last_error))
        return false;
      if (!this.last_error.equals(that.last_error))
        return false;
    }

    boolean this_present_execute_latency = true && this.is_set_execute_latency();
    boolean that_present_execute_latency = true && that.is_set_execute_latency();
    if (this_present_execute_latency || that_present_execute_latency) {
      if (!(this_present_execute_latency && that_present_execute_latency))
        return false;
      if (this.execute_latency != that.execute_latency)
        return false;
    }

    boolean this_present_process_latency = true && this.is_set_process_latency();
    boolean that_present_process_latency = true && that.is_set_process_latency();
    if (this_present_process_latency || that_present_process_latency) {
      if (!(this_present_process_latency && that_present_process_latency))
        return false;
      if (this.process_latency != that.process_latency)
        return false;
    }

    boolean this_present_num_executed = true && this.is_set_num_executed();
    boolean that_present_num_executed = true && that.is_set_num_executed();
    if (this_present_num_executed || that_present_num_executed) {
      if (!(this_present_num_executed && that_present_num_executed))
        return false;
      if (this.num_executed != that.num_executed)
        return false;
    }

    boolean this_present_capacity = true && this.is_set_capacity();
    boolean that_present_capacity = true && that.is_set_capacity();
    if (this_present_capacity || that_present_capacity) {
      if (!(this_present_capacity && that_present_capacity))
        return false;
      if (this.capacity != that.capacity)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (is_set_id());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_num_executors = true && (is_set_num_executors());
    list.add(present_num_executors);
    if (present_num_executors)
      list.add(num_executors);

    boolean present_num_tasks = true && (is_set_num_tasks());
    list.add(present_num_tasks);
    if (present_num_tasks)
      list.add(num_tasks);

    boolean present_num_emitted = true && (is_set_num_emitted());
    list.add(present_num_emitted);
    if (present_num_emitted)
      list.add(num_emitted);

    boolean present_num_transferred = true && (is_set_num_transferred());
    list.add(present_num_transferred);
    if (present_num_transferred)
      list.add(num_transferred);

    boolean present_num_acked = true && (is_set_num_acked());
    list.add(present_num_acked);
    if (present_num_acked)
      list.add(num_acked);

    boolean present_num_failed = true && (is_set_num_failed());
    list.add(present_num_failed);
    if (present_num_failed)
      list.add(num_failed);

    boolean present_last_error = true && (is_set_last_error());
    list.add(present_last_error);
    if (present_last_error)
      list.add(last_error);

    boolean present_execute_latency = true && (is_set_execute_latency());
    list.add(present_execute_latency);
    if (present_execute_latency)
      list.add(execute_latency);

    boolean present_process_latency = true && (is_set_process_latency());
    list.add(present_process_latency);
    if (present_process_latency)
      list.add(process_latency);

    boolean present_num_executed = true && (is_set_num_executed());
    list.add(present_num_executed);
    if (present_num_executed)
      list.add(num_executed);

    boolean present_capacity = true && (is_set_capacity());
    list.add(present_capacity);
    if (present_capacity)
      list.add(capacity);

    return list.hashCode();
  }

  @Override
  public int compareTo(BoltAggregateStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_id()).compareTo(other.is_set_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_executors()).compareTo(other.is_set_num_executors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_executors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_executors, other.num_executors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_tasks()).compareTo(other.is_set_num_tasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_tasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_tasks, other.num_tasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_emitted()).compareTo(other.is_set_num_emitted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_emitted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_emitted, other.num_emitted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_transferred()).compareTo(other.is_set_num_transferred());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_transferred()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_transferred, other.num_transferred);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_acked()).compareTo(other.is_set_num_acked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_acked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_acked, other.num_acked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_failed()).compareTo(other.is_set_num_failed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_failed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_failed, other.num_failed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_last_error()).compareTo(other.is_set_last_error());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_last_error()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_error, other.last_error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_execute_latency()).compareTo(other.is_set_execute_latency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_execute_latency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execute_latency, other.execute_latency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_process_latency()).compareTo(other.is_set_process_latency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_process_latency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.process_latency, other.process_latency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_executed()).compareTo(other.is_set_num_executed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_executed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_executed, other.num_executed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_capacity()).compareTo(other.is_set_capacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_capacity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capacity, other.capacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BoltAggregateStats(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (is_set_num_executors()) {
      if (!first) sb.append(", ");
      sb.append("num_executors:");
      sb.append(this.num_executors);
      first = false;
    }
    if (is_set_num_tasks()) {
      if (!first) sb.append(", ");
      sb.append("num_tasks:");
      sb.append(this.num_tasks);
      first = false;
    }
    if (is_set_num_emitted()) {
      if (!first) sb.append(", ");
      sb.append("num_emitted:");
      sb.append(this.num_emitted);
      first = false;
    }
    if (is_set_num_transferred()) {
      if (!first) sb.append(", ");
      sb.append("num_transferred:");
      sb.append(this.num_transferred);
      first = false;
    }
    if (is_set_num_acked()) {
      if (!first) sb.append(", ");
      sb.append("num_acked:");
      sb.append(this.num_acked);
      first = false;
    }
    if (is_set_num_failed()) {
      if (!first) sb.append(", ");
      sb.append("num_failed:");
      sb.append(this.num_failed);
      first = false;
    }
    if (is_set_last_error()) {
      if (!first) sb.append(", ");
      sb.append("last_error:");
      if (this.last_error == null) {
        sb.append("null");
      } else {
        sb.append(this.last_error);
      }
      first = false;
    }
    if (is_set_execute_latency()) {
      if (!first) sb.append(", ");
      sb.append("execute_latency:");
      sb.append(this.execute_latency);
      first = false;
    }
    if (is_set_process_latency()) {
      if (!first) sb.append(", ");
      sb.append("process_latency:");
      sb.append(this.process_latency);
      first = false;
    }
    if (is_set_num_executed()) {
      if (!first) sb.append(", ");
      sb.append("num_executed:");
      sb.append(this.num_executed);
      first = false;
    }
    if (is_set_capacity()) {
      if (!first) sb.append(", ");
      sb.append("capacity:");
      sb.append(this.capacity);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (last_error != null) {
      last_error.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BoltAggregateStatsStandardSchemeFactory implements SchemeFactory {
    public BoltAggregateStatsStandardScheme getScheme() {
      return new BoltAggregateStatsStandardScheme();
    }
  }

  private static class BoltAggregateStatsStandardScheme extends StandardScheme<BoltAggregateStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BoltAggregateStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.set_id_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 513: // NUM_EXECUTORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_executors = iprot.readI32();
              struct.set_num_executors_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 514: // NUM_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_tasks = iprot.readI32();
              struct.set_num_tasks_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 515: // NUM_EMITTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_emitted = iprot.readI64();
              struct.set_num_emitted_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 516: // NUM_TRANSFERRED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_transferred = iprot.readI64();
              struct.set_num_transferred_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 517: // NUM_ACKED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_acked = iprot.readI64();
              struct.set_num_acked_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 518: // NUM_FAILED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_failed = iprot.readI64();
              struct.set_num_failed_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 519: // LAST_ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.last_error = new ErrorInfo();
              struct.last_error.read(iprot);
              struct.set_last_error_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 520: // EXECUTE_LATENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.execute_latency = iprot.readDouble();
              struct.set_execute_latency_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 521: // PROCESS_LATENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.process_latency = iprot.readDouble();
              struct.set_process_latency_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 522: // NUM_EXECUTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_executed = iprot.readI64();
              struct.set_num_executed_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 523: // CAPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.capacity = iprot.readDouble();
              struct.set_capacity_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BoltAggregateStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_num_executors()) {
        oprot.writeFieldBegin(NUM_EXECUTORS_FIELD_DESC);
        oprot.writeI32(struct.num_executors);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_num_tasks()) {
        oprot.writeFieldBegin(NUM_TASKS_FIELD_DESC);
        oprot.writeI32(struct.num_tasks);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_num_emitted()) {
        oprot.writeFieldBegin(NUM_EMITTED_FIELD_DESC);
        oprot.writeI64(struct.num_emitted);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_num_transferred()) {
        oprot.writeFieldBegin(NUM_TRANSFERRED_FIELD_DESC);
        oprot.writeI64(struct.num_transferred);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_num_acked()) {
        oprot.writeFieldBegin(NUM_ACKED_FIELD_DESC);
        oprot.writeI64(struct.num_acked);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_num_failed()) {
        oprot.writeFieldBegin(NUM_FAILED_FIELD_DESC);
        oprot.writeI64(struct.num_failed);
        oprot.writeFieldEnd();
      }
      if (struct.last_error != null) {
        if (struct.is_set_last_error()) {
          oprot.writeFieldBegin(LAST_ERROR_FIELD_DESC);
          struct.last_error.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.is_set_execute_latency()) {
        oprot.writeFieldBegin(EXECUTE_LATENCY_FIELD_DESC);
        oprot.writeDouble(struct.execute_latency);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_process_latency()) {
        oprot.writeFieldBegin(PROCESS_LATENCY_FIELD_DESC);
        oprot.writeDouble(struct.process_latency);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_num_executed()) {
        oprot.writeFieldBegin(NUM_EXECUTED_FIELD_DESC);
        oprot.writeI64(struct.num_executed);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_capacity()) {
        oprot.writeFieldBegin(CAPACITY_FIELD_DESC);
        oprot.writeDouble(struct.capacity);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BoltAggregateStatsTupleSchemeFactory implements SchemeFactory {
    public BoltAggregateStatsTupleScheme getScheme() {
      return new BoltAggregateStatsTupleScheme();
    }
  }

  private static class BoltAggregateStatsTupleScheme extends TupleScheme<BoltAggregateStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BoltAggregateStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      BitSet optionals = new BitSet();
      if (struct.is_set_num_executors()) {
        optionals.set(0);
      }
      if (struct.is_set_num_tasks()) {
        optionals.set(1);
      }
      if (struct.is_set_num_emitted()) {
        optionals.set(2);
      }
      if (struct.is_set_num_transferred()) {
        optionals.set(3);
      }
      if (struct.is_set_num_acked()) {
        optionals.set(4);
      }
      if (struct.is_set_num_failed()) {
        optionals.set(5);
      }
      if (struct.is_set_last_error()) {
        optionals.set(6);
      }
      if (struct.is_set_execute_latency()) {
        optionals.set(7);
      }
      if (struct.is_set_process_latency()) {
        optionals.set(8);
      }
      if (struct.is_set_num_executed()) {
        optionals.set(9);
      }
      if (struct.is_set_capacity()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.is_set_num_executors()) {
        oprot.writeI32(struct.num_executors);
      }
      if (struct.is_set_num_tasks()) {
        oprot.writeI32(struct.num_tasks);
      }
      if (struct.is_set_num_emitted()) {
        oprot.writeI64(struct.num_emitted);
      }
      if (struct.is_set_num_transferred()) {
        oprot.writeI64(struct.num_transferred);
      }
      if (struct.is_set_num_acked()) {
        oprot.writeI64(struct.num_acked);
      }
      if (struct.is_set_num_failed()) {
        oprot.writeI64(struct.num_failed);
      }
      if (struct.is_set_last_error()) {
        struct.last_error.write(oprot);
      }
      if (struct.is_set_execute_latency()) {
        oprot.writeDouble(struct.execute_latency);
      }
      if (struct.is_set_process_latency()) {
        oprot.writeDouble(struct.process_latency);
      }
      if (struct.is_set_num_executed()) {
        oprot.writeI64(struct.num_executed);
      }
      if (struct.is_set_capacity()) {
        oprot.writeDouble(struct.capacity);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BoltAggregateStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.set_id_isSet(true);
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.num_executors = iprot.readI32();
        struct.set_num_executors_isSet(true);
      }
      if (incoming.get(1)) {
        struct.num_tasks = iprot.readI32();
        struct.set_num_tasks_isSet(true);
      }
      if (incoming.get(2)) {
        struct.num_emitted = iprot.readI64();
        struct.set_num_emitted_isSet(true);
      }
      if (incoming.get(3)) {
        struct.num_transferred = iprot.readI64();
        struct.set_num_transferred_isSet(true);
      }
      if (incoming.get(4)) {
        struct.num_acked = iprot.readI64();
        struct.set_num_acked_isSet(true);
      }
      if (incoming.get(5)) {
        struct.num_failed = iprot.readI64();
        struct.set_num_failed_isSet(true);
      }
      if (incoming.get(6)) {
        struct.last_error = new ErrorInfo();
        struct.last_error.read(iprot);
        struct.set_last_error_isSet(true);
      }
      if (incoming.get(7)) {
        struct.execute_latency = iprot.readDouble();
        struct.set_execute_latency_isSet(true);
      }
      if (incoming.get(8)) {
        struct.process_latency = iprot.readDouble();
        struct.set_process_latency_isSet(true);
      }
      if (incoming.get(9)) {
        struct.num_executed = iprot.readI64();
        struct.set_num_executed_isSet(true);
      }
      if (incoming.get(10)) {
        struct.capacity = iprot.readDouble();
        struct.set_capacity_isSet(true);
      }
    }
  }

}

