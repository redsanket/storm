/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package backtype.storm.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TopologyStats implements org.apache.thrift.TBase<TopologyStats, TopologyStats._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopologyStats");

  private static final org.apache.thrift.protocol.TField EMITTED_FIELD_DESC = new org.apache.thrift.protocol.TField("emitted", org.apache.thrift.protocol.TType.MAP, (short)513);
  private static final org.apache.thrift.protocol.TField TRANSFERRED_FIELD_DESC = new org.apache.thrift.protocol.TField("transferred", org.apache.thrift.protocol.TType.MAP, (short)514);
  private static final org.apache.thrift.protocol.TField COMPLETE_LATENCIES_FIELD_DESC = new org.apache.thrift.protocol.TField("complete_latencies", org.apache.thrift.protocol.TType.MAP, (short)515);
  private static final org.apache.thrift.protocol.TField ACKED_FIELD_DESC = new org.apache.thrift.protocol.TField("acked", org.apache.thrift.protocol.TType.MAP, (short)516);
  private static final org.apache.thrift.protocol.TField FAILED_FIELD_DESC = new org.apache.thrift.protocol.TField("failed", org.apache.thrift.protocol.TType.MAP, (short)517);

  private Map<String,Long> emitted; // required
  private Map<String,Long> transferred; // required
  private Map<String,Double> complete_latencies; // required
  private Map<String,Long> acked; // required
  private Map<String,Long> failed; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EMITTED((short)513, "emitted"),
    TRANSFERRED((short)514, "transferred"),
    COMPLETE_LATENCIES((short)515, "complete_latencies"),
    ACKED((short)516, "acked"),
    FAILED((short)517, "failed");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 513: // EMITTED
          return EMITTED;
        case 514: // TRANSFERRED
          return TRANSFERRED;
        case 515: // COMPLETE_LATENCIES
          return COMPLETE_LATENCIES;
        case 516: // ACKED
          return ACKED;
        case 517: // FAILED
          return FAILED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EMITTED, new org.apache.thrift.meta_data.FieldMetaData("emitted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.TRANSFERRED, new org.apache.thrift.meta_data.FieldMetaData("transferred", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.COMPLETE_LATENCIES, new org.apache.thrift.meta_data.FieldMetaData("complete_latencies", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ACKED, new org.apache.thrift.meta_data.FieldMetaData("acked", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.FAILED, new org.apache.thrift.meta_data.FieldMetaData("failed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopologyStats.class, metaDataMap);
  }

  public TopologyStats() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopologyStats(TopologyStats other) {
    if (other.is_set_emitted()) {
      Map<String,Long> __this__emitted = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.emitted.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__emitted_copy_key = other_element_key;

        Long __this__emitted_copy_value = other_element_value;

        __this__emitted.put(__this__emitted_copy_key, __this__emitted_copy_value);
      }
      this.emitted = __this__emitted;
    }
    if (other.is_set_transferred()) {
      Map<String,Long> __this__transferred = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.transferred.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__transferred_copy_key = other_element_key;

        Long __this__transferred_copy_value = other_element_value;

        __this__transferred.put(__this__transferred_copy_key, __this__transferred_copy_value);
      }
      this.transferred = __this__transferred;
    }
    if (other.is_set_complete_latencies()) {
      Map<String,Double> __this__complete_latencies = new HashMap<String,Double>();
      for (Map.Entry<String, Double> other_element : other.complete_latencies.entrySet()) {

        String other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        String __this__complete_latencies_copy_key = other_element_key;

        Double __this__complete_latencies_copy_value = other_element_value;

        __this__complete_latencies.put(__this__complete_latencies_copy_key, __this__complete_latencies_copy_value);
      }
      this.complete_latencies = __this__complete_latencies;
    }
    if (other.is_set_acked()) {
      Map<String,Long> __this__acked = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.acked.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__acked_copy_key = other_element_key;

        Long __this__acked_copy_value = other_element_value;

        __this__acked.put(__this__acked_copy_key, __this__acked_copy_value);
      }
      this.acked = __this__acked;
    }
    if (other.is_set_failed()) {
      Map<String,Long> __this__failed = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.failed.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__failed_copy_key = other_element_key;

        Long __this__failed_copy_value = other_element_value;

        __this__failed.put(__this__failed_copy_key, __this__failed_copy_value);
      }
      this.failed = __this__failed;
    }
  }

  public TopologyStats deepCopy() {
    return new TopologyStats(this);
  }

  @Override
  public void clear() {
    this.emitted = null;
    this.transferred = null;
    this.complete_latencies = null;
    this.acked = null;
    this.failed = null;
  }

  public int get_emitted_size() {
    return (this.emitted == null) ? 0 : this.emitted.size();
  }

  public void put_to_emitted(String key, long val) {
    if (this.emitted == null) {
      this.emitted = new HashMap<String,Long>();
    }
    this.emitted.put(key, val);
  }

  public Map<String,Long> get_emitted() {
    return this.emitted;
  }

  public void set_emitted(Map<String,Long> emitted) {
    this.emitted = emitted;
  }

  public void unset_emitted() {
    this.emitted = null;
  }

  /** Returns true if field emitted is set (has been assigned a value) and false otherwise */
  public boolean is_set_emitted() {
    return this.emitted != null;
  }

  public void set_emitted_isSet(boolean value) {
    if (!value) {
      this.emitted = null;
    }
  }

  public int get_transferred_size() {
    return (this.transferred == null) ? 0 : this.transferred.size();
  }

  public void put_to_transferred(String key, long val) {
    if (this.transferred == null) {
      this.transferred = new HashMap<String,Long>();
    }
    this.transferred.put(key, val);
  }

  public Map<String,Long> get_transferred() {
    return this.transferred;
  }

  public void set_transferred(Map<String,Long> transferred) {
    this.transferred = transferred;
  }

  public void unset_transferred() {
    this.transferred = null;
  }

  /** Returns true if field transferred is set (has been assigned a value) and false otherwise */
  public boolean is_set_transferred() {
    return this.transferred != null;
  }

  public void set_transferred_isSet(boolean value) {
    if (!value) {
      this.transferred = null;
    }
  }

  public int get_complete_latencies_size() {
    return (this.complete_latencies == null) ? 0 : this.complete_latencies.size();
  }

  public void put_to_complete_latencies(String key, double val) {
    if (this.complete_latencies == null) {
      this.complete_latencies = new HashMap<String,Double>();
    }
    this.complete_latencies.put(key, val);
  }

  public Map<String,Double> get_complete_latencies() {
    return this.complete_latencies;
  }

  public void set_complete_latencies(Map<String,Double> complete_latencies) {
    this.complete_latencies = complete_latencies;
  }

  public void unset_complete_latencies() {
    this.complete_latencies = null;
  }

  /** Returns true if field complete_latencies is set (has been assigned a value) and false otherwise */
  public boolean is_set_complete_latencies() {
    return this.complete_latencies != null;
  }

  public void set_complete_latencies_isSet(boolean value) {
    if (!value) {
      this.complete_latencies = null;
    }
  }

  public int get_acked_size() {
    return (this.acked == null) ? 0 : this.acked.size();
  }

  public void put_to_acked(String key, long val) {
    if (this.acked == null) {
      this.acked = new HashMap<String,Long>();
    }
    this.acked.put(key, val);
  }

  public Map<String,Long> get_acked() {
    return this.acked;
  }

  public void set_acked(Map<String,Long> acked) {
    this.acked = acked;
  }

  public void unset_acked() {
    this.acked = null;
  }

  /** Returns true if field acked is set (has been assigned a value) and false otherwise */
  public boolean is_set_acked() {
    return this.acked != null;
  }

  public void set_acked_isSet(boolean value) {
    if (!value) {
      this.acked = null;
    }
  }

  public int get_failed_size() {
    return (this.failed == null) ? 0 : this.failed.size();
  }

  public void put_to_failed(String key, long val) {
    if (this.failed == null) {
      this.failed = new HashMap<String,Long>();
    }
    this.failed.put(key, val);
  }

  public Map<String,Long> get_failed() {
    return this.failed;
  }

  public void set_failed(Map<String,Long> failed) {
    this.failed = failed;
  }

  public void unset_failed() {
    this.failed = null;
  }

  /** Returns true if field failed is set (has been assigned a value) and false otherwise */
  public boolean is_set_failed() {
    return this.failed != null;
  }

  public void set_failed_isSet(boolean value) {
    if (!value) {
      this.failed = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EMITTED:
      if (value == null) {
        unset_emitted();
      } else {
        set_emitted((Map<String,Long>)value);
      }
      break;

    case TRANSFERRED:
      if (value == null) {
        unset_transferred();
      } else {
        set_transferred((Map<String,Long>)value);
      }
      break;

    case COMPLETE_LATENCIES:
      if (value == null) {
        unset_complete_latencies();
      } else {
        set_complete_latencies((Map<String,Double>)value);
      }
      break;

    case ACKED:
      if (value == null) {
        unset_acked();
      } else {
        set_acked((Map<String,Long>)value);
      }
      break;

    case FAILED:
      if (value == null) {
        unset_failed();
      } else {
        set_failed((Map<String,Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EMITTED:
      return get_emitted();

    case TRANSFERRED:
      return get_transferred();

    case COMPLETE_LATENCIES:
      return get_complete_latencies();

    case ACKED:
      return get_acked();

    case FAILED:
      return get_failed();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EMITTED:
      return is_set_emitted();
    case TRANSFERRED:
      return is_set_transferred();
    case COMPLETE_LATENCIES:
      return is_set_complete_latencies();
    case ACKED:
      return is_set_acked();
    case FAILED:
      return is_set_failed();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TopologyStats)
      return this.equals((TopologyStats)that);
    return false;
  }

  public boolean equals(TopologyStats that) {
    if (that == null)
      return false;

    boolean this_present_emitted = true && this.is_set_emitted();
    boolean that_present_emitted = true && that.is_set_emitted();
    if (this_present_emitted || that_present_emitted) {
      if (!(this_present_emitted && that_present_emitted))
        return false;
      if (!this.emitted.equals(that.emitted))
        return false;
    }

    boolean this_present_transferred = true && this.is_set_transferred();
    boolean that_present_transferred = true && that.is_set_transferred();
    if (this_present_transferred || that_present_transferred) {
      if (!(this_present_transferred && that_present_transferred))
        return false;
      if (!this.transferred.equals(that.transferred))
        return false;
    }

    boolean this_present_complete_latencies = true && this.is_set_complete_latencies();
    boolean that_present_complete_latencies = true && that.is_set_complete_latencies();
    if (this_present_complete_latencies || that_present_complete_latencies) {
      if (!(this_present_complete_latencies && that_present_complete_latencies))
        return false;
      if (!this.complete_latencies.equals(that.complete_latencies))
        return false;
    }

    boolean this_present_acked = true && this.is_set_acked();
    boolean that_present_acked = true && that.is_set_acked();
    if (this_present_acked || that_present_acked) {
      if (!(this_present_acked && that_present_acked))
        return false;
      if (!this.acked.equals(that.acked))
        return false;
    }

    boolean this_present_failed = true && this.is_set_failed();
    boolean that_present_failed = true && that.is_set_failed();
    if (this_present_failed || that_present_failed) {
      if (!(this_present_failed && that_present_failed))
        return false;
      if (!this.failed.equals(that.failed))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_emitted = true && (is_set_emitted());
    builder.append(present_emitted);
    if (present_emitted)
      builder.append(emitted);

    boolean present_transferred = true && (is_set_transferred());
    builder.append(present_transferred);
    if (present_transferred)
      builder.append(transferred);

    boolean present_complete_latencies = true && (is_set_complete_latencies());
    builder.append(present_complete_latencies);
    if (present_complete_latencies)
      builder.append(complete_latencies);

    boolean present_acked = true && (is_set_acked());
    builder.append(present_acked);
    if (present_acked)
      builder.append(acked);

    boolean present_failed = true && (is_set_failed());
    builder.append(present_failed);
    if (present_failed)
      builder.append(failed);

    return builder.toHashCode();
  }

  public int compareTo(TopologyStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TopologyStats typedOther = (TopologyStats)other;

    lastComparison = Boolean.valueOf(is_set_emitted()).compareTo(typedOther.is_set_emitted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_emitted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emitted, typedOther.emitted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_transferred()).compareTo(typedOther.is_set_transferred());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_transferred()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferred, typedOther.transferred);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_complete_latencies()).compareTo(typedOther.is_set_complete_latencies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_complete_latencies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.complete_latencies, typedOther.complete_latencies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_acked()).compareTo(typedOther.is_set_acked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_acked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acked, typedOther.acked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_failed()).compareTo(typedOther.is_set_failed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_failed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failed, typedOther.failed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 513: // EMITTED
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map158 = iprot.readMapBegin();
              this.emitted = new HashMap<String,Long>(2*_map158.size);
              for (int _i159 = 0; _i159 < _map158.size; ++_i159)
              {
                String _key160; // required
                long _val161; // required
                _key160 = iprot.readString();
                _val161 = iprot.readI64();
                this.emitted.put(_key160, _val161);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 514: // TRANSFERRED
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map162 = iprot.readMapBegin();
              this.transferred = new HashMap<String,Long>(2*_map162.size);
              for (int _i163 = 0; _i163 < _map162.size; ++_i163)
              {
                String _key164; // required
                long _val165; // required
                _key164 = iprot.readString();
                _val165 = iprot.readI64();
                this.transferred.put(_key164, _val165);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 515: // COMPLETE_LATENCIES
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map166 = iprot.readMapBegin();
              this.complete_latencies = new HashMap<String,Double>(2*_map166.size);
              for (int _i167 = 0; _i167 < _map166.size; ++_i167)
              {
                String _key168; // required
                double _val169; // required
                _key168 = iprot.readString();
                _val169 = iprot.readDouble();
                this.complete_latencies.put(_key168, _val169);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 516: // ACKED
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map170 = iprot.readMapBegin();
              this.acked = new HashMap<String,Long>(2*_map170.size);
              for (int _i171 = 0; _i171 < _map170.size; ++_i171)
              {
                String _key172; // required
                long _val173; // required
                _key172 = iprot.readString();
                _val173 = iprot.readI64();
                this.acked.put(_key172, _val173);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 517: // FAILED
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map174 = iprot.readMapBegin();
              this.failed = new HashMap<String,Long>(2*_map174.size);
              for (int _i175 = 0; _i175 < _map174.size; ++_i175)
              {
                String _key176; // required
                long _val177; // required
                _key176 = iprot.readString();
                _val177 = iprot.readI64();
                this.failed.put(_key176, _val177);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.emitted != null) {
      if (is_set_emitted()) {
        oprot.writeFieldBegin(EMITTED_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, this.emitted.size()));
          for (Map.Entry<String, Long> _iter178 : this.emitted.entrySet())
          {
            oprot.writeString(_iter178.getKey());
            oprot.writeI64(_iter178.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.transferred != null) {
      if (is_set_transferred()) {
        oprot.writeFieldBegin(TRANSFERRED_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, this.transferred.size()));
          for (Map.Entry<String, Long> _iter179 : this.transferred.entrySet())
          {
            oprot.writeString(_iter179.getKey());
            oprot.writeI64(_iter179.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.complete_latencies != null) {
      if (is_set_complete_latencies()) {
        oprot.writeFieldBegin(COMPLETE_LATENCIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, this.complete_latencies.size()));
          for (Map.Entry<String, Double> _iter180 : this.complete_latencies.entrySet())
          {
            oprot.writeString(_iter180.getKey());
            oprot.writeDouble(_iter180.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.acked != null) {
      if (is_set_acked()) {
        oprot.writeFieldBegin(ACKED_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, this.acked.size()));
          for (Map.Entry<String, Long> _iter181 : this.acked.entrySet())
          {
            oprot.writeString(_iter181.getKey());
            oprot.writeI64(_iter181.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.failed != null) {
      if (is_set_failed()) {
        oprot.writeFieldBegin(FAILED_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, this.failed.size()));
          for (Map.Entry<String, Long> _iter182 : this.failed.entrySet())
          {
            oprot.writeString(_iter182.getKey());
            oprot.writeI64(_iter182.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TopologyStats(");
    boolean first = true;

    if (is_set_emitted()) {
      sb.append("emitted:");
      if (this.emitted == null) {
        sb.append("null");
      } else {
        sb.append(this.emitted);
      }
      first = false;
    }
    if (is_set_transferred()) {
      if (!first) sb.append(", ");
      sb.append("transferred:");
      if (this.transferred == null) {
        sb.append("null");
      } else {
        sb.append(this.transferred);
      }
      first = false;
    }
    if (is_set_complete_latencies()) {
      if (!first) sb.append(", ");
      sb.append("complete_latencies:");
      if (this.complete_latencies == null) {
        sb.append("null");
      } else {
        sb.append(this.complete_latencies);
      }
      first = false;
    }
    if (is_set_acked()) {
      if (!first) sb.append(", ");
      sb.append("acked:");
      if (this.acked == null) {
        sb.append("null");
      } else {
        sb.append(this.acked);
      }
      first = false;
    }
    if (is_set_failed()) {
      if (!first) sb.append(", ");
      sb.append("failed:");
      if (this.failed == null) {
        sb.append("null");
      } else {
        sb.append(this.failed);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

