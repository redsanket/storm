/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package backtype.storm.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HBRecords implements org.apache.thrift.TBase<HBRecords, HBRecords._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HBRecords");

  private static final org.apache.thrift.protocol.TField PULSES_FIELD_DESC = new org.apache.thrift.protocol.TField("pulses", org.apache.thrift.protocol.TType.LIST, (short)1);

  private List<Pulse> pulses; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PULSES((short)1, "pulses");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PULSES
          return PULSES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PULSES, new org.apache.thrift.meta_data.FieldMetaData("pulses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Pulse.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HBRecords.class, metaDataMap);
  }

  public HBRecords() {
  }

  public HBRecords(
    List<Pulse> pulses)
  {
    this();
    this.pulses = pulses;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HBRecords(HBRecords other) {
    if (other.is_set_pulses()) {
      List<Pulse> __this__pulses = new ArrayList<Pulse>();
      for (Pulse other_element : other.pulses) {
        __this__pulses.add(new Pulse(other_element));
      }
      this.pulses = __this__pulses;
    }
  }

  public HBRecords deepCopy() {
    return new HBRecords(this);
  }

  @Override
  public void clear() {
    this.pulses = null;
  }

  public int get_pulses_size() {
    return (this.pulses == null) ? 0 : this.pulses.size();
  }

  public java.util.Iterator<Pulse> get_pulses_iterator() {
    return (this.pulses == null) ? null : this.pulses.iterator();
  }

  public void add_to_pulses(Pulse elem) {
    if (this.pulses == null) {
      this.pulses = new ArrayList<Pulse>();
    }
    this.pulses.add(elem);
  }

  public List<Pulse> get_pulses() {
    return this.pulses;
  }

  public void set_pulses(List<Pulse> pulses) {
    this.pulses = pulses;
  }

  public void unset_pulses() {
    this.pulses = null;
  }

  /** Returns true if field pulses is set (has been assigned a value) and false otherwise */
  public boolean is_set_pulses() {
    return this.pulses != null;
  }

  public void set_pulses_isSet(boolean value) {
    if (!value) {
      this.pulses = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PULSES:
      if (value == null) {
        unset_pulses();
      } else {
        set_pulses((List<Pulse>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PULSES:
      return get_pulses();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PULSES:
      return is_set_pulses();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HBRecords)
      return this.equals((HBRecords)that);
    return false;
  }

  public boolean equals(HBRecords that) {
    if (that == null)
      return false;

    boolean this_present_pulses = true && this.is_set_pulses();
    boolean that_present_pulses = true && that.is_set_pulses();
    if (this_present_pulses || that_present_pulses) {
      if (!(this_present_pulses && that_present_pulses))
        return false;
      if (!this.pulses.equals(that.pulses))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_pulses = true && (is_set_pulses());
    builder.append(present_pulses);
    if (present_pulses)
      builder.append(pulses);

    return builder.toHashCode();
  }

  public int compareTo(HBRecords other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    HBRecords typedOther = (HBRecords)other;

    lastComparison = Boolean.valueOf(is_set_pulses()).compareTo(typedOther.is_set_pulses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_pulses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pulses, typedOther.pulses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PULSES
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
              this.pulses = new ArrayList<Pulse>(_list168.size);
              for (int _i169 = 0; _i169 < _list168.size; ++_i169)
              {
                Pulse _elem170; // required
                _elem170 = new Pulse();
                _elem170.read(iprot);
                this.pulses.add(_elem170);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.pulses != null) {
      oprot.writeFieldBegin(PULSES_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.pulses.size()));
        for (Pulse _iter171 : this.pulses)
        {
          _iter171.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HBRecords(");
    boolean first = true;

    sb.append("pulses:");
    if (this.pulses == null) {
      sb.append("null");
    } else {
      sb.append(this.pulses);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

