/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package backtype.storm.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TopologyPageInfo implements org.apache.thrift.TBase<TopologyPageInfo, TopologyPageInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopologyPageInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)513);
  private static final org.apache.thrift.protocol.TField UPTIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("uptime_secs", org.apache.thrift.protocol.TType.I32, (short)514);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)515);
  private static final org.apache.thrift.protocol.TField NUM_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_tasks", org.apache.thrift.protocol.TType.I32, (short)516);
  private static final org.apache.thrift.protocol.TField NUM_WORKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_workers", org.apache.thrift.protocol.TType.I32, (short)517);
  private static final org.apache.thrift.protocol.TField NUM_EXECUTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_executors", org.apache.thrift.protocol.TType.I32, (short)518);
  private static final org.apache.thrift.protocol.TField TOPOLOGY_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_conf", org.apache.thrift.protocol.TType.STRING, (short)519);
  private static final org.apache.thrift.protocol.TField SPOUT_AGG_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("spout_agg_stats", org.apache.thrift.protocol.TType.LIST, (short)520);
  private static final org.apache.thrift.protocol.TField BOLT_AGG_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("bolt_agg_stats", org.apache.thrift.protocol.TType.LIST, (short)521);
  private static final org.apache.thrift.protocol.TField SCHED_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("sched_status", org.apache.thrift.protocol.TType.STRING, (short)522);
  private static final org.apache.thrift.protocol.TField TOPOLOGY_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_stats", org.apache.thrift.protocol.TType.STRUCT, (short)523);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)524);

  private String id; // required
  private String name; // required
  private int uptime_secs; // required
  private String status; // required
  private int num_tasks; // required
  private int num_workers; // required
  private int num_executors; // required
  private String topology_conf; // required
  private List<SpoutAggregateStats> spout_agg_stats; // required
  private List<BoltAggregateStats> bolt_agg_stats; // required
  private String sched_status; // required
  private TopologyStats topology_stats; // required
  private String owner; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)513, "name"),
    UPTIME_SECS((short)514, "uptime_secs"),
    STATUS((short)515, "status"),
    NUM_TASKS((short)516, "num_tasks"),
    NUM_WORKERS((short)517, "num_workers"),
    NUM_EXECUTORS((short)518, "num_executors"),
    TOPOLOGY_CONF((short)519, "topology_conf"),
    SPOUT_AGG_STATS((short)520, "spout_agg_stats"),
    BOLT_AGG_STATS((short)521, "bolt_agg_stats"),
    SCHED_STATUS((short)522, "sched_status"),
    TOPOLOGY_STATS((short)523, "topology_stats"),
    OWNER((short)524, "owner");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 513: // NAME
          return NAME;
        case 514: // UPTIME_SECS
          return UPTIME_SECS;
        case 515: // STATUS
          return STATUS;
        case 516: // NUM_TASKS
          return NUM_TASKS;
        case 517: // NUM_WORKERS
          return NUM_WORKERS;
        case 518: // NUM_EXECUTORS
          return NUM_EXECUTORS;
        case 519: // TOPOLOGY_CONF
          return TOPOLOGY_CONF;
        case 520: // SPOUT_AGG_STATS
          return SPOUT_AGG_STATS;
        case 521: // BOLT_AGG_STATS
          return BOLT_AGG_STATS;
        case 522: // SCHED_STATUS
          return SCHED_STATUS;
        case 523: // TOPOLOGY_STATS
          return TOPOLOGY_STATS;
        case 524: // OWNER
          return OWNER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPTIME_SECS_ISSET_ID = 0;
  private static final int __NUM_TASKS_ISSET_ID = 1;
  private static final int __NUM_WORKERS_ISSET_ID = 2;
  private static final int __NUM_EXECUTORS_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPTIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("uptime_secs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_TASKS, new org.apache.thrift.meta_data.FieldMetaData("num_tasks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_WORKERS, new org.apache.thrift.meta_data.FieldMetaData("num_workers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_EXECUTORS, new org.apache.thrift.meta_data.FieldMetaData("num_executors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOPOLOGY_CONF, new org.apache.thrift.meta_data.FieldMetaData("topology_conf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPOUT_AGG_STATS, new org.apache.thrift.meta_data.FieldMetaData("spout_agg_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpoutAggregateStats.class))));
    tmpMap.put(_Fields.BOLT_AGG_STATS, new org.apache.thrift.meta_data.FieldMetaData("bolt_agg_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BoltAggregateStats.class))));
    tmpMap.put(_Fields.SCHED_STATUS, new org.apache.thrift.meta_data.FieldMetaData("sched_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPOLOGY_STATS, new org.apache.thrift.meta_data.FieldMetaData("topology_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TopologyStats.class)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopologyPageInfo.class, metaDataMap);
  }

  public TopologyPageInfo() {
  }

  public TopologyPageInfo(
    String id)
  {
    this();
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopologyPageInfo(TopologyPageInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.is_set_id()) {
      this.id = other.id;
    }
    if (other.is_set_name()) {
      this.name = other.name;
    }
    this.uptime_secs = other.uptime_secs;
    if (other.is_set_status()) {
      this.status = other.status;
    }
    this.num_tasks = other.num_tasks;
    this.num_workers = other.num_workers;
    this.num_executors = other.num_executors;
    if (other.is_set_topology_conf()) {
      this.topology_conf = other.topology_conf;
    }
    if (other.is_set_spout_agg_stats()) {
      List<SpoutAggregateStats> __this__spout_agg_stats = new ArrayList<SpoutAggregateStats>();
      for (SpoutAggregateStats other_element : other.spout_agg_stats) {
        __this__spout_agg_stats.add(new SpoutAggregateStats(other_element));
      }
      this.spout_agg_stats = __this__spout_agg_stats;
    }
    if (other.is_set_bolt_agg_stats()) {
      List<BoltAggregateStats> __this__bolt_agg_stats = new ArrayList<BoltAggregateStats>();
      for (BoltAggregateStats other_element : other.bolt_agg_stats) {
        __this__bolt_agg_stats.add(new BoltAggregateStats(other_element));
      }
      this.bolt_agg_stats = __this__bolt_agg_stats;
    }
    if (other.is_set_sched_status()) {
      this.sched_status = other.sched_status;
    }
    if (other.is_set_topology_stats()) {
      this.topology_stats = new TopologyStats(other.topology_stats);
    }
    if (other.is_set_owner()) {
      this.owner = other.owner;
    }
  }

  public TopologyPageInfo deepCopy() {
    return new TopologyPageInfo(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    set_uptime_secs_isSet(false);
    this.uptime_secs = 0;
    this.status = null;
    set_num_tasks_isSet(false);
    this.num_tasks = 0;
    set_num_workers_isSet(false);
    this.num_workers = 0;
    set_num_executors_isSet(false);
    this.num_executors = 0;
    this.topology_conf = null;
    this.spout_agg_stats = null;
    this.bolt_agg_stats = null;
    this.sched_status = null;
    this.topology_stats = null;
    this.owner = null;
  }

  public String get_id() {
    return this.id;
  }

  public void set_id(String id) {
    this.id = id;
  }

  public void unset_id() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean is_set_id() {
    return this.id != null;
  }

  public void set_id_isSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String get_name() {
    return this.name;
  }

  public void set_name(String name) {
    this.name = name;
  }

  public void unset_name() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean is_set_name() {
    return this.name != null;
  }

  public void set_name_isSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int get_uptime_secs() {
    return this.uptime_secs;
  }

  public void set_uptime_secs(int uptime_secs) {
    this.uptime_secs = uptime_secs;
    set_uptime_secs_isSet(true);
  }

  public void unset_uptime_secs() {
    __isset_bit_vector.clear(__UPTIME_SECS_ISSET_ID);
  }

  /** Returns true if field uptime_secs is set (has been assigned a value) and false otherwise */
  public boolean is_set_uptime_secs() {
    return __isset_bit_vector.get(__UPTIME_SECS_ISSET_ID);
  }

  public void set_uptime_secs_isSet(boolean value) {
    __isset_bit_vector.set(__UPTIME_SECS_ISSET_ID, value);
  }

  public String get_status() {
    return this.status;
  }

  public void set_status(String status) {
    this.status = status;
  }

  public void unset_status() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean is_set_status() {
    return this.status != null;
  }

  public void set_status_isSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int get_num_tasks() {
    return this.num_tasks;
  }

  public void set_num_tasks(int num_tasks) {
    this.num_tasks = num_tasks;
    set_num_tasks_isSet(true);
  }

  public void unset_num_tasks() {
    __isset_bit_vector.clear(__NUM_TASKS_ISSET_ID);
  }

  /** Returns true if field num_tasks is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_tasks() {
    return __isset_bit_vector.get(__NUM_TASKS_ISSET_ID);
  }

  public void set_num_tasks_isSet(boolean value) {
    __isset_bit_vector.set(__NUM_TASKS_ISSET_ID, value);
  }

  public int get_num_workers() {
    return this.num_workers;
  }

  public void set_num_workers(int num_workers) {
    this.num_workers = num_workers;
    set_num_workers_isSet(true);
  }

  public void unset_num_workers() {
    __isset_bit_vector.clear(__NUM_WORKERS_ISSET_ID);
  }

  /** Returns true if field num_workers is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_workers() {
    return __isset_bit_vector.get(__NUM_WORKERS_ISSET_ID);
  }

  public void set_num_workers_isSet(boolean value) {
    __isset_bit_vector.set(__NUM_WORKERS_ISSET_ID, value);
  }

  public int get_num_executors() {
    return this.num_executors;
  }

  public void set_num_executors(int num_executors) {
    this.num_executors = num_executors;
    set_num_executors_isSet(true);
  }

  public void unset_num_executors() {
    __isset_bit_vector.clear(__NUM_EXECUTORS_ISSET_ID);
  }

  /** Returns true if field num_executors is set (has been assigned a value) and false otherwise */
  public boolean is_set_num_executors() {
    return __isset_bit_vector.get(__NUM_EXECUTORS_ISSET_ID);
  }

  public void set_num_executors_isSet(boolean value) {
    __isset_bit_vector.set(__NUM_EXECUTORS_ISSET_ID, value);
  }

  public String get_topology_conf() {
    return this.topology_conf;
  }

  public void set_topology_conf(String topology_conf) {
    this.topology_conf = topology_conf;
  }

  public void unset_topology_conf() {
    this.topology_conf = null;
  }

  /** Returns true if field topology_conf is set (has been assigned a value) and false otherwise */
  public boolean is_set_topology_conf() {
    return this.topology_conf != null;
  }

  public void set_topology_conf_isSet(boolean value) {
    if (!value) {
      this.topology_conf = null;
    }
  }

  public int get_spout_agg_stats_size() {
    return (this.spout_agg_stats == null) ? 0 : this.spout_agg_stats.size();
  }

  public java.util.Iterator<SpoutAggregateStats> get_spout_agg_stats_iterator() {
    return (this.spout_agg_stats == null) ? null : this.spout_agg_stats.iterator();
  }

  public void add_to_spout_agg_stats(SpoutAggregateStats elem) {
    if (this.spout_agg_stats == null) {
      this.spout_agg_stats = new ArrayList<SpoutAggregateStats>();
    }
    this.spout_agg_stats.add(elem);
  }

  public List<SpoutAggregateStats> get_spout_agg_stats() {
    return this.spout_agg_stats;
  }

  public void set_spout_agg_stats(List<SpoutAggregateStats> spout_agg_stats) {
    this.spout_agg_stats = spout_agg_stats;
  }

  public void unset_spout_agg_stats() {
    this.spout_agg_stats = null;
  }

  /** Returns true if field spout_agg_stats is set (has been assigned a value) and false otherwise */
  public boolean is_set_spout_agg_stats() {
    return this.spout_agg_stats != null;
  }

  public void set_spout_agg_stats_isSet(boolean value) {
    if (!value) {
      this.spout_agg_stats = null;
    }
  }

  public int get_bolt_agg_stats_size() {
    return (this.bolt_agg_stats == null) ? 0 : this.bolt_agg_stats.size();
  }

  public java.util.Iterator<BoltAggregateStats> get_bolt_agg_stats_iterator() {
    return (this.bolt_agg_stats == null) ? null : this.bolt_agg_stats.iterator();
  }

  public void add_to_bolt_agg_stats(BoltAggregateStats elem) {
    if (this.bolt_agg_stats == null) {
      this.bolt_agg_stats = new ArrayList<BoltAggregateStats>();
    }
    this.bolt_agg_stats.add(elem);
  }

  public List<BoltAggregateStats> get_bolt_agg_stats() {
    return this.bolt_agg_stats;
  }

  public void set_bolt_agg_stats(List<BoltAggregateStats> bolt_agg_stats) {
    this.bolt_agg_stats = bolt_agg_stats;
  }

  public void unset_bolt_agg_stats() {
    this.bolt_agg_stats = null;
  }

  /** Returns true if field bolt_agg_stats is set (has been assigned a value) and false otherwise */
  public boolean is_set_bolt_agg_stats() {
    return this.bolt_agg_stats != null;
  }

  public void set_bolt_agg_stats_isSet(boolean value) {
    if (!value) {
      this.bolt_agg_stats = null;
    }
  }

  public String get_sched_status() {
    return this.sched_status;
  }

  public void set_sched_status(String sched_status) {
    this.sched_status = sched_status;
  }

  public void unset_sched_status() {
    this.sched_status = null;
  }

  /** Returns true if field sched_status is set (has been assigned a value) and false otherwise */
  public boolean is_set_sched_status() {
    return this.sched_status != null;
  }

  public void set_sched_status_isSet(boolean value) {
    if (!value) {
      this.sched_status = null;
    }
  }

  public TopologyStats get_topology_stats() {
    return this.topology_stats;
  }

  public void set_topology_stats(TopologyStats topology_stats) {
    this.topology_stats = topology_stats;
  }

  public void unset_topology_stats() {
    this.topology_stats = null;
  }

  /** Returns true if field topology_stats is set (has been assigned a value) and false otherwise */
  public boolean is_set_topology_stats() {
    return this.topology_stats != null;
  }

  public void set_topology_stats_isSet(boolean value) {
    if (!value) {
      this.topology_stats = null;
    }
  }

  public String get_owner() {
    return this.owner;
  }

  public void set_owner(String owner) {
    this.owner = owner;
  }

  public void unset_owner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean is_set_owner() {
    return this.owner != null;
  }

  public void set_owner_isSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unset_name();
      } else {
        set_name((String)value);
      }
      break;

    case UPTIME_SECS:
      if (value == null) {
        unset_uptime_secs();
      } else {
        set_uptime_secs((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unset_status();
      } else {
        set_status((String)value);
      }
      break;

    case NUM_TASKS:
      if (value == null) {
        unset_num_tasks();
      } else {
        set_num_tasks((Integer)value);
      }
      break;

    case NUM_WORKERS:
      if (value == null) {
        unset_num_workers();
      } else {
        set_num_workers((Integer)value);
      }
      break;

    case NUM_EXECUTORS:
      if (value == null) {
        unset_num_executors();
      } else {
        set_num_executors((Integer)value);
      }
      break;

    case TOPOLOGY_CONF:
      if (value == null) {
        unset_topology_conf();
      } else {
        set_topology_conf((String)value);
      }
      break;

    case SPOUT_AGG_STATS:
      if (value == null) {
        unset_spout_agg_stats();
      } else {
        set_spout_agg_stats((List<SpoutAggregateStats>)value);
      }
      break;

    case BOLT_AGG_STATS:
      if (value == null) {
        unset_bolt_agg_stats();
      } else {
        set_bolt_agg_stats((List<BoltAggregateStats>)value);
      }
      break;

    case SCHED_STATUS:
      if (value == null) {
        unset_sched_status();
      } else {
        set_sched_status((String)value);
      }
      break;

    case TOPOLOGY_STATS:
      if (value == null) {
        unset_topology_stats();
      } else {
        set_topology_stats((TopologyStats)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unset_owner();
      } else {
        set_owner((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return get_id();

    case NAME:
      return get_name();

    case UPTIME_SECS:
      return Integer.valueOf(get_uptime_secs());

    case STATUS:
      return get_status();

    case NUM_TASKS:
      return Integer.valueOf(get_num_tasks());

    case NUM_WORKERS:
      return Integer.valueOf(get_num_workers());

    case NUM_EXECUTORS:
      return Integer.valueOf(get_num_executors());

    case TOPOLOGY_CONF:
      return get_topology_conf();

    case SPOUT_AGG_STATS:
      return get_spout_agg_stats();

    case BOLT_AGG_STATS:
      return get_bolt_agg_stats();

    case SCHED_STATUS:
      return get_sched_status();

    case TOPOLOGY_STATS:
      return get_topology_stats();

    case OWNER:
      return get_owner();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return is_set_id();
    case NAME:
      return is_set_name();
    case UPTIME_SECS:
      return is_set_uptime_secs();
    case STATUS:
      return is_set_status();
    case NUM_TASKS:
      return is_set_num_tasks();
    case NUM_WORKERS:
      return is_set_num_workers();
    case NUM_EXECUTORS:
      return is_set_num_executors();
    case TOPOLOGY_CONF:
      return is_set_topology_conf();
    case SPOUT_AGG_STATS:
      return is_set_spout_agg_stats();
    case BOLT_AGG_STATS:
      return is_set_bolt_agg_stats();
    case SCHED_STATUS:
      return is_set_sched_status();
    case TOPOLOGY_STATS:
      return is_set_topology_stats();
    case OWNER:
      return is_set_owner();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TopologyPageInfo)
      return this.equals((TopologyPageInfo)that);
    return false;
  }

  public boolean equals(TopologyPageInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.is_set_id();
    boolean that_present_id = true && that.is_set_id();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.is_set_name();
    boolean that_present_name = true && that.is_set_name();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_uptime_secs = true && this.is_set_uptime_secs();
    boolean that_present_uptime_secs = true && that.is_set_uptime_secs();
    if (this_present_uptime_secs || that_present_uptime_secs) {
      if (!(this_present_uptime_secs && that_present_uptime_secs))
        return false;
      if (this.uptime_secs != that.uptime_secs)
        return false;
    }

    boolean this_present_status = true && this.is_set_status();
    boolean that_present_status = true && that.is_set_status();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_num_tasks = true && this.is_set_num_tasks();
    boolean that_present_num_tasks = true && that.is_set_num_tasks();
    if (this_present_num_tasks || that_present_num_tasks) {
      if (!(this_present_num_tasks && that_present_num_tasks))
        return false;
      if (this.num_tasks != that.num_tasks)
        return false;
    }

    boolean this_present_num_workers = true && this.is_set_num_workers();
    boolean that_present_num_workers = true && that.is_set_num_workers();
    if (this_present_num_workers || that_present_num_workers) {
      if (!(this_present_num_workers && that_present_num_workers))
        return false;
      if (this.num_workers != that.num_workers)
        return false;
    }

    boolean this_present_num_executors = true && this.is_set_num_executors();
    boolean that_present_num_executors = true && that.is_set_num_executors();
    if (this_present_num_executors || that_present_num_executors) {
      if (!(this_present_num_executors && that_present_num_executors))
        return false;
      if (this.num_executors != that.num_executors)
        return false;
    }

    boolean this_present_topology_conf = true && this.is_set_topology_conf();
    boolean that_present_topology_conf = true && that.is_set_topology_conf();
    if (this_present_topology_conf || that_present_topology_conf) {
      if (!(this_present_topology_conf && that_present_topology_conf))
        return false;
      if (!this.topology_conf.equals(that.topology_conf))
        return false;
    }

    boolean this_present_spout_agg_stats = true && this.is_set_spout_agg_stats();
    boolean that_present_spout_agg_stats = true && that.is_set_spout_agg_stats();
    if (this_present_spout_agg_stats || that_present_spout_agg_stats) {
      if (!(this_present_spout_agg_stats && that_present_spout_agg_stats))
        return false;
      if (!this.spout_agg_stats.equals(that.spout_agg_stats))
        return false;
    }

    boolean this_present_bolt_agg_stats = true && this.is_set_bolt_agg_stats();
    boolean that_present_bolt_agg_stats = true && that.is_set_bolt_agg_stats();
    if (this_present_bolt_agg_stats || that_present_bolt_agg_stats) {
      if (!(this_present_bolt_agg_stats && that_present_bolt_agg_stats))
        return false;
      if (!this.bolt_agg_stats.equals(that.bolt_agg_stats))
        return false;
    }

    boolean this_present_sched_status = true && this.is_set_sched_status();
    boolean that_present_sched_status = true && that.is_set_sched_status();
    if (this_present_sched_status || that_present_sched_status) {
      if (!(this_present_sched_status && that_present_sched_status))
        return false;
      if (!this.sched_status.equals(that.sched_status))
        return false;
    }

    boolean this_present_topology_stats = true && this.is_set_topology_stats();
    boolean that_present_topology_stats = true && that.is_set_topology_stats();
    if (this_present_topology_stats || that_present_topology_stats) {
      if (!(this_present_topology_stats && that_present_topology_stats))
        return false;
      if (!this.topology_stats.equals(that.topology_stats))
        return false;
    }

    boolean this_present_owner = true && this.is_set_owner();
    boolean that_present_owner = true && that.is_set_owner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true && (is_set_id());
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_name = true && (is_set_name());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_uptime_secs = true && (is_set_uptime_secs());
    builder.append(present_uptime_secs);
    if (present_uptime_secs)
      builder.append(uptime_secs);

    boolean present_status = true && (is_set_status());
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    boolean present_num_tasks = true && (is_set_num_tasks());
    builder.append(present_num_tasks);
    if (present_num_tasks)
      builder.append(num_tasks);

    boolean present_num_workers = true && (is_set_num_workers());
    builder.append(present_num_workers);
    if (present_num_workers)
      builder.append(num_workers);

    boolean present_num_executors = true && (is_set_num_executors());
    builder.append(present_num_executors);
    if (present_num_executors)
      builder.append(num_executors);

    boolean present_topology_conf = true && (is_set_topology_conf());
    builder.append(present_topology_conf);
    if (present_topology_conf)
      builder.append(topology_conf);

    boolean present_spout_agg_stats = true && (is_set_spout_agg_stats());
    builder.append(present_spout_agg_stats);
    if (present_spout_agg_stats)
      builder.append(spout_agg_stats);

    boolean present_bolt_agg_stats = true && (is_set_bolt_agg_stats());
    builder.append(present_bolt_agg_stats);
    if (present_bolt_agg_stats)
      builder.append(bolt_agg_stats);

    boolean present_sched_status = true && (is_set_sched_status());
    builder.append(present_sched_status);
    if (present_sched_status)
      builder.append(sched_status);

    boolean present_topology_stats = true && (is_set_topology_stats());
    builder.append(present_topology_stats);
    if (present_topology_stats)
      builder.append(topology_stats);

    boolean present_owner = true && (is_set_owner());
    builder.append(present_owner);
    if (present_owner)
      builder.append(owner);

    return builder.toHashCode();
  }

  public int compareTo(TopologyPageInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TopologyPageInfo typedOther = (TopologyPageInfo)other;

    lastComparison = Boolean.valueOf(is_set_id()).compareTo(typedOther.is_set_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_name()).compareTo(typedOther.is_set_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_uptime_secs()).compareTo(typedOther.is_set_uptime_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_uptime_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uptime_secs, typedOther.uptime_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_status()).compareTo(typedOther.is_set_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_tasks()).compareTo(typedOther.is_set_num_tasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_tasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_tasks, typedOther.num_tasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_workers()).compareTo(typedOther.is_set_num_workers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_workers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_workers, typedOther.num_workers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_num_executors()).compareTo(typedOther.is_set_num_executors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_num_executors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_executors, typedOther.num_executors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_topology_conf()).compareTo(typedOther.is_set_topology_conf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_topology_conf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_conf, typedOther.topology_conf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_spout_agg_stats()).compareTo(typedOther.is_set_spout_agg_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_spout_agg_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spout_agg_stats, typedOther.spout_agg_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_bolt_agg_stats()).compareTo(typedOther.is_set_bolt_agg_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_bolt_agg_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bolt_agg_stats, typedOther.bolt_agg_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_sched_status()).compareTo(typedOther.is_set_sched_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_sched_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sched_status, typedOther.sched_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_topology_stats()).compareTo(typedOther.is_set_topology_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_topology_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_stats, typedOther.topology_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_owner()).compareTo(typedOther.is_set_owner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_owner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.id = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 513: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 514: // UPTIME_SECS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.uptime_secs = iprot.readI32();
            set_uptime_secs_isSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 515: // STATUS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.status = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 516: // NUM_TASKS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num_tasks = iprot.readI32();
            set_num_tasks_isSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 517: // NUM_WORKERS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num_workers = iprot.readI32();
            set_num_workers_isSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 518: // NUM_EXECUTORS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num_executors = iprot.readI32();
            set_num_executors_isSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 519: // TOPOLOGY_CONF
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.topology_conf = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 520: // SPOUT_AGG_STATS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list183 = iprot.readListBegin();
              this.spout_agg_stats = new ArrayList<SpoutAggregateStats>(_list183.size);
              for (int _i184 = 0; _i184 < _list183.size; ++_i184)
              {
                SpoutAggregateStats _elem185; // required
                _elem185 = new SpoutAggregateStats();
                _elem185.read(iprot);
                this.spout_agg_stats.add(_elem185);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 521: // BOLT_AGG_STATS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list186 = iprot.readListBegin();
              this.bolt_agg_stats = new ArrayList<BoltAggregateStats>(_list186.size);
              for (int _i187 = 0; _i187 < _list186.size; ++_i187)
              {
                BoltAggregateStats _elem188; // required
                _elem188 = new BoltAggregateStats();
                _elem188.read(iprot);
                this.bolt_agg_stats.add(_elem188);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 522: // SCHED_STATUS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.sched_status = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 523: // TOPOLOGY_STATS
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.topology_stats = new TopologyStats();
            this.topology_stats.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 524: // OWNER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.owner = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      if (is_set_name()) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
    }
    if (is_set_uptime_secs()) {
      oprot.writeFieldBegin(UPTIME_SECS_FIELD_DESC);
      oprot.writeI32(this.uptime_secs);
      oprot.writeFieldEnd();
    }
    if (this.status != null) {
      if (is_set_status()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(this.status);
        oprot.writeFieldEnd();
      }
    }
    if (is_set_num_tasks()) {
      oprot.writeFieldBegin(NUM_TASKS_FIELD_DESC);
      oprot.writeI32(this.num_tasks);
      oprot.writeFieldEnd();
    }
    if (is_set_num_workers()) {
      oprot.writeFieldBegin(NUM_WORKERS_FIELD_DESC);
      oprot.writeI32(this.num_workers);
      oprot.writeFieldEnd();
    }
    if (is_set_num_executors()) {
      oprot.writeFieldBegin(NUM_EXECUTORS_FIELD_DESC);
      oprot.writeI32(this.num_executors);
      oprot.writeFieldEnd();
    }
    if (this.topology_conf != null) {
      if (is_set_topology_conf()) {
        oprot.writeFieldBegin(TOPOLOGY_CONF_FIELD_DESC);
        oprot.writeString(this.topology_conf);
        oprot.writeFieldEnd();
      }
    }
    if (this.spout_agg_stats != null) {
      if (is_set_spout_agg_stats()) {
        oprot.writeFieldBegin(SPOUT_AGG_STATS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.spout_agg_stats.size()));
          for (SpoutAggregateStats _iter189 : this.spout_agg_stats)
          {
            _iter189.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.bolt_agg_stats != null) {
      if (is_set_bolt_agg_stats()) {
        oprot.writeFieldBegin(BOLT_AGG_STATS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.bolt_agg_stats.size()));
          for (BoltAggregateStats _iter190 : this.bolt_agg_stats)
          {
            _iter190.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.sched_status != null) {
      if (is_set_sched_status()) {
        oprot.writeFieldBegin(SCHED_STATUS_FIELD_DESC);
        oprot.writeString(this.sched_status);
        oprot.writeFieldEnd();
      }
    }
    if (this.topology_stats != null) {
      if (is_set_topology_stats()) {
        oprot.writeFieldBegin(TOPOLOGY_STATS_FIELD_DESC);
        this.topology_stats.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.owner != null) {
      if (is_set_owner()) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(this.owner);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TopologyPageInfo(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (is_set_name()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (is_set_uptime_secs()) {
      if (!first) sb.append(", ");
      sb.append("uptime_secs:");
      sb.append(this.uptime_secs);
      first = false;
    }
    if (is_set_status()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (is_set_num_tasks()) {
      if (!first) sb.append(", ");
      sb.append("num_tasks:");
      sb.append(this.num_tasks);
      first = false;
    }
    if (is_set_num_workers()) {
      if (!first) sb.append(", ");
      sb.append("num_workers:");
      sb.append(this.num_workers);
      first = false;
    }
    if (is_set_num_executors()) {
      if (!first) sb.append(", ");
      sb.append("num_executors:");
      sb.append(this.num_executors);
      first = false;
    }
    if (is_set_topology_conf()) {
      if (!first) sb.append(", ");
      sb.append("topology_conf:");
      if (this.topology_conf == null) {
        sb.append("null");
      } else {
        sb.append(this.topology_conf);
      }
      first = false;
    }
    if (is_set_spout_agg_stats()) {
      if (!first) sb.append(", ");
      sb.append("spout_agg_stats:");
      if (this.spout_agg_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.spout_agg_stats);
      }
      first = false;
    }
    if (is_set_bolt_agg_stats()) {
      if (!first) sb.append(", ");
      sb.append("bolt_agg_stats:");
      if (this.bolt_agg_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.bolt_agg_stats);
      }
      first = false;
    }
    if (is_set_sched_status()) {
      if (!first) sb.append(", ");
      sb.append("sched_status:");
      if (this.sched_status == null) {
        sb.append("null");
      } else {
        sb.append(this.sched_status);
      }
      first = false;
    }
    if (is_set_topology_stats()) {
      if (!first) sb.append(", ");
      sb.append("topology_stats:");
      if (this.topology_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.topology_stats);
      }
      first = false;
    }
    if (is_set_owner()) {
      if (!first) sb.append(", ");
      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

