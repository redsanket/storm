/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package backtype.storm.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HBNodes implements org.apache.thrift.TBase<HBNodes, HBNodes._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HBNodes");

  private static final org.apache.thrift.protocol.TField PULSE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pulseIds", org.apache.thrift.protocol.TType.LIST, (short)1);

  private List<String> pulseIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PULSE_IDS((short)1, "pulseIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PULSE_IDS
          return PULSE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PULSE_IDS, new org.apache.thrift.meta_data.FieldMetaData("pulseIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HBNodes.class, metaDataMap);
  }

  public HBNodes() {
  }

  public HBNodes(
    List<String> pulseIds)
  {
    this();
    this.pulseIds = pulseIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HBNodes(HBNodes other) {
    if (other.is_set_pulseIds()) {
      List<String> __this__pulseIds = new ArrayList<String>();
      for (String other_element : other.pulseIds) {
        __this__pulseIds.add(other_element);
      }
      this.pulseIds = __this__pulseIds;
    }
  }

  public HBNodes deepCopy() {
    return new HBNodes(this);
  }

  @Override
  public void clear() {
    this.pulseIds = null;
  }

  public int get_pulseIds_size() {
    return (this.pulseIds == null) ? 0 : this.pulseIds.size();
  }

  public java.util.Iterator<String> get_pulseIds_iterator() {
    return (this.pulseIds == null) ? null : this.pulseIds.iterator();
  }

  public void add_to_pulseIds(String elem) {
    if (this.pulseIds == null) {
      this.pulseIds = new ArrayList<String>();
    }
    this.pulseIds.add(elem);
  }

  public List<String> get_pulseIds() {
    return this.pulseIds;
  }

  public void set_pulseIds(List<String> pulseIds) {
    this.pulseIds = pulseIds;
  }

  public void unset_pulseIds() {
    this.pulseIds = null;
  }

  /** Returns true if field pulseIds is set (has been assigned a value) and false otherwise */
  public boolean is_set_pulseIds() {
    return this.pulseIds != null;
  }

  public void set_pulseIds_isSet(boolean value) {
    if (!value) {
      this.pulseIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PULSE_IDS:
      if (value == null) {
        unset_pulseIds();
      } else {
        set_pulseIds((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PULSE_IDS:
      return get_pulseIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PULSE_IDS:
      return is_set_pulseIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HBNodes)
      return this.equals((HBNodes)that);
    return false;
  }

  public boolean equals(HBNodes that) {
    if (that == null)
      return false;

    boolean this_present_pulseIds = true && this.is_set_pulseIds();
    boolean that_present_pulseIds = true && that.is_set_pulseIds();
    if (this_present_pulseIds || that_present_pulseIds) {
      if (!(this_present_pulseIds && that_present_pulseIds))
        return false;
      if (!this.pulseIds.equals(that.pulseIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_pulseIds = true && (is_set_pulseIds());
    builder.append(present_pulseIds);
    if (present_pulseIds)
      builder.append(pulseIds);

    return builder.toHashCode();
  }

  public int compareTo(HBNodes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    HBNodes typedOther = (HBNodes)other;

    lastComparison = Boolean.valueOf(is_set_pulseIds()).compareTo(typedOther.is_set_pulseIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_pulseIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pulseIds, typedOther.pulseIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PULSE_IDS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
              this.pulseIds = new ArrayList<String>(_list172.size);
              for (int _i173 = 0; _i173 < _list172.size; ++_i173)
              {
                String _elem174; // required
                _elem174 = iprot.readString();
                this.pulseIds.add(_elem174);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.pulseIds != null) {
      oprot.writeFieldBegin(PULSE_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.pulseIds.size()));
        for (String _iter175 : this.pulseIds)
        {
          oprot.writeString(_iter175);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HBNodes(");
    boolean first = true;

    sb.append("pulseIds:");
    if (this.pulseIds == null) {
      sb.append("null");
    } else {
      sb.append(this.pulseIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

